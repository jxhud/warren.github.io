<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【 CSS 】浮动和清除浮动</title>
    <link href="/2020/04/06/%E3%80%90-CSS-%E3%80%91%E6%B5%AE%E5%8A%A8%E5%92%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <url>/2020/04/06/%E3%80%90-CSS-%E3%80%91%E6%B5%AE%E5%8A%A8%E5%92%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="浮动和清除浮动"><a href="#浮动和清除浮动" class="headerlink" title="浮动和清除浮动"></a>浮动和清除浮动</h1><blockquote><p><strong>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</strong></p><p><strong>由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</strong></p><p>——文章参考w3school</p></blockquote><p><a href="https://www.w3school.com.cn/css/css_positioning_floating.asp" target="_blank" rel="noopener">浮动性质参考w3school</a></p><h2 id="1、探讨为什么要清除浮动？"><a href="#1、探讨为什么要清除浮动？" class="headerlink" title="1、探讨为什么要清除浮动？"></a>1、探讨为什么要清除浮动？</h2><blockquote><p>清除浮动不是取消浮动框的浮动状态，而是因为浮动元素脱离文档流导致的高度塌陷等问题需要清楚浮动来解决，看下面的例子</p></blockquote><ul><li><p>例子中的 html </p><pre><code class="html">  &lt;div class=&quot;out&quot;&gt;      &lt;div class=&quot;float&quot;&gt;&lt;/div&gt;  &lt;/div&gt;</code></pre></li><li><p>先看个不浮动的情况</p><pre><code class="css">  .out {      width: 400px;      background-color: silver;  }  .float {      width: 100px;      height: 200px;      background-color: red;  }</code></pre><p>  <img src="/img/image-20200406104548783.png" srcset="/img/loading.gif" alt="不浮动"></p></li><li><p>当子盒子浮动的时候出现的情况</p><pre><code class="css">  .out {      width: 400px;      background-color: silver;  }  .float {      float: right;      width: 100px;      height: 200px;      background-color: red;  }</code></pre><p>  <img src="/img/image-20200406104935469.png" srcset="/img/loading.gif" alt="浮动后"></p><blockquote><p>我们会发现当父盒子未设置高度控制，需要靠子盒子撑起高度，即随内容的高度增加而增加的，这种情况下，如果所有子盒子都是浮动的，就会出现父盒子高度塌陷，就像上图；或者浮动的盒子的高度比正常文档流盒子撑起的父盒子高度都高的情况下，浮动盒子就会溢出父盒子之外，清除浮动就是要解决这类情况。</p></blockquote></li></ul><h2 id="2、如何清除浮动？"><a href="#2、如何清除浮动？" class="headerlink" title="2、如何清除浮动？"></a>2、如何清除浮动？</h2>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>float</tag>
      
      <tag>浮动</tag>
      
      <tag>清除浮动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【 CSS 】浮动和清除浮动</title>
    <link href="/2020/04/06/%E6%B5%AE%E5%8A%A8%E5%92%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/"/>
    <url>/2020/04/06/%E6%B5%AE%E5%8A%A8%E5%92%8C%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>float</tag>
      
      <tag>浮动</tag>
      
      <tag>清除浮动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【 Git 】Git 链接 Github远程库</title>
    <link href="/2020/04/05/Git-%E9%93%BE%E6%8E%A5-Github%E8%BF%9C%E7%A8%8B%E5%BA%93/"/>
    <url>/2020/04/05/Git-%E9%93%BE%E6%8E%A5-Github%E8%BF%9C%E7%A8%8B%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Git-链接-Github远程库"><a href="#Git-链接-Github远程库" class="headerlink" title="Git 链接 Github远程库"></a>Git 链接 Github远程库</h1><h2 id="1-创建SSH-Key。"><a href="#1-创建SSH-Key。" class="headerlink" title="1.创建SSH Key。"></a>1.创建SSH Key。</h2><p>在用户主目录（C:\Users\Administrator）下，看看有没有.ssh文件，如果有，再看文件下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接到下一步。如果没有，打开Git Bash，输入命令，创建SSH Key</p><p><code>ssh-keygen -t rsa -C &quot;123@126.com&quot; //123 是你自己注册GitHub的邮箱</code></p><p>（注：id_rsa.pub是公钥，可以公开，id_rsa是私钥，不要公开）</p><h2 id="2-本地创建git版本管理仓库"><a href="#2-本地创建git版本管理仓库" class="headerlink" title="2.本地创建git版本管理仓库"></a>2.本地创建git版本管理仓库</h2><p><code>git init</code></p><h2 id="3-github创建repository仓库"><a href="#3-github创建repository仓库" class="headerlink" title="3.github创建repository仓库"></a>3.github创建repository仓库</h2><p>下一步</p><h2 id="4-链接git与github"><a href="#4-链接git与github" class="headerlink" title="4.链接git与github"></a>4.链接git与github</h2><p>创建新的GitHub仓库后</p><p><strong>在你的本地git版本仓库下打开Git Bash，输入以下指令链接Git与Github仓库</strong></p><p><code>git remote add origin git@github.com:jxhud/exercise.git</code></p><p>上面的<code>git@github.com:jxhud/exercise.git</code>是我的GitHub远程仓库，你自行替换成你的就行</p><h2 id="5-Git推送到GitHub"><a href="#5-Git推送到GitHub" class="headerlink" title="5.Git推送到GitHub"></a>5.Git推送到GitHub</h2><p><code>git push -u origin master</code> </p><p>关联后,第一次因为master分支是空的，加上了-u，推送master分支的所有内容命令</p><p>此后，每次本地提交后，就可以使用命令<code>git push origin master</code>推送最新修改</p><p>推送到其他分支也可以把master替换成其他就行。</p><p><strong>注意</strong> ：推送前Git的仓库里必须要有版本快照，不能为空，所以要先创建提交，如果Git仓库里本来就有快照，就可以直接推送</p><p><strong>注意</strong>：如果出现这种情况：</p><pre><code class="java">error: failed to push some refs to &#39;git@github.com:jxhud/exercise.git&#39;</code></pre><p>那么就是你本地的文件和GitHub上的不一致，要使用命令</p><p><code>git pull origin master</code></p><p>把远程仓库的文件下载下来与你的工作目录合并，再推送</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【 Git 】Git使用手册</title>
    <link href="/2020/04/05/Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2020/04/05/Git%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h1><h2 id="一、下载安装git"><a href="#一、下载安装git" class="headerlink" title="一、下载安装git"></a>一、下载安装git</h2><blockquote><p>自行百度下载安装！！！</p></blockquote><h2 id="二、初次使用配置"><a href="#二、初次使用配置" class="headerlink" title="二、初次使用配置"></a>二、初次使用配置</h2><blockquote><p>在git cmd中依次输入如下命令：</p><p><code>git config --glabal user.name &quot;你的用户名（不要中文）&quot;</code></p><p><code>git config --glabal user.email &quot;你的邮箱&quot;</code></p></blockquote><h2 id="三、简单命令"><a href="#三、简单命令" class="headerlink" title="三、简单命令"></a>三、简单命令</h2><h3 id="（一）两步将工作目录里的文件放到Git仓库"><a href="#（一）两步将工作目录里的文件放到Git仓库" class="headerlink" title="（一）两步将工作目录里的文件放到Git仓库"></a>（一）两步将工作目录里的文件放到Git仓库</h3><ol><li><p><code>git add 文件名</code></p></li><li><p><code>git commit -m &quot;你对这次提交的备注，方便查看&quot;</code></p><h3 id="（二）查看git里的文件状态"><a href="#（二）查看git里的文件状态" class="headerlink" title="（二）查看git里的文件状态"></a>（二）查看git里的文件状态</h3><p> <code>git status</code></p><h3 id="（三）查看提交日志"><a href="#（三）查看提交日志" class="headerlink" title="（三）查看提交日志"></a>（三）查看提交日志</h3><p> <code>git log</code>：基本形式</p></li></ol><p>​    <code>git log --oneline</code>：把每一个提交压缩到了一行中。它默认只显示提交ID和提交信息的第一行</p><p>​    <code>git log --decorate</code>：很多时候，知道每个提交关联的分支或者标签很有用。–decorate标记让git log显示指向这个提交的所有引用（比如说分支、标签等）。</p><p>​    <code>git log --graph</code>：绘制一个ASCII图像来展示提交历史的分支结构。它经常和–oneline和–decorate两个选项一起使用，这样会更容易查看哪个提交属于哪个</p><p>​    <code>git reflog</code> ：查看所有历史提交</p><h3 id="（四）reset和checkout"><a href="#（四）reset和checkout" class="headerlink" title="（四）reset和checkout"></a>（四）reset和checkout</h3><p> <strong>注意：这个命令没那么简单！仔细品味</strong></p><h4 id="1）reset"><a href="#1）reset" class="headerlink" title="1）reset"></a>1）<strong>reset</strong></h4><blockquote><p>三种操作：(ps：下面操作中HEAD后面的波浪线表示该仓库的上一个版本（这里的版本也称作快照），两个波浪线表示现在HEAD指向的版本的前两个版本，如果是前n个版本可以写作HEAD~n)</p></blockquote><ul><li><p><strong><code>git reset --soft HEAD~</code></strong></p><ul><li>执行该操作后：<ul><li>移动HEAD的指向，将其指向上一个版本</li></ul></li></ul></li><li><p><strong><code>git reset --mixed HEAD~</code></strong></p><ul><li>执行该操作后：<ul><li>移动HEAD的指向，将其指向上一个快照</li><li>将HEAD移动后指向的版本内容回滚到暂存区域</li></ul></li></ul></li><li><p><strong><code>git reset --hard HEAD~</code></strong></p><p>  （<strong>注意危险：该操作会将项目目录区域下的文件覆盖掉，本地的文件可能丢失，谨慎操作！</strong>）</p><ul><li>执行该操作后：<ul><li>移动HEAD的指向，将其指向前一个版本快照</li><li>将HEAD移动后指向的版本快照回滚到暂存区域</li><li>将暂存区域的文件回滚到项目目录区域（<strong>万分注意：这里这步是会覆盖项目文件的</strong>）</li></ul></li></ul></li></ul><h4 id="2）checkout"><a href="#2）checkout" class="headerlink" title="2）checkout"></a>2）checkout</h4><ul><li><p>将版本快照滚到工作目录和暂存区域里去</p><p>  <strong><code>git checkout 版本号</code></strong></p></li></ul><ul><li><p>将暂存区域里的东西回滚到工作目录里来</p><p>  <strong><code>git checkout</code></strong></p><p>  单个文件：<strong>git checkout 文件名</strong></p></li></ul><p> <strong>总结：</strong></p><ol><li><strong><code>--soft</code>、<code>--mixed</code>、<code>--hard</code>分别回滚一级二级三级，程度递增，特别<code>hard</code>会回滚到项目目录覆盖到本地，需要注意</strong></li><li><strong>默认是<code>--mixed</code></strong></li><li><strong><code>reset</code>还可以回滚到特定的版本快照，只需要快照的id即可，即版本的hash值，hash值可以用<code>git log查看</code>，<code>git reset 版本id</code>，例如：<code>git reset bc57ccd</code>（不用全部，前几位能够定位即可）</strong></li><li><strong><code>reset</code>还可以回滚单个文件，<code>git reset</code> 版本快照 文件名或者路径，例如：<code>git reset bc57ccd HEADME.md</code></strong><ol start="5"><li><strong><code>reset</code>还可以往前滚，如果你往后滚了，<code>HEAD</code>指针指向了旧的版本快照，那么你只要找到你要回滚的之前的新提交的版本快照id就可以，而查看快照id可以用<code>git reflog</code>查看。</strong></li></ol></li></ol><h3 id="（五）对比文件"><a href="#（五）对比文件" class="headerlink" title="（五）对比文件"></a>（五）对比文件</h3><h4 id="1-比较暂存区域与工作目录"><a href="#1-比较暂存区域与工作目录" class="headerlink" title="(1)比较暂存区域与工作目录"></a>(1)比较暂存区域与工作目录</h4><p><code>git diff</code></p><p>对比文件较多时，可以操作移动，简单操作如下：</p><ul><li>按键盘上的<code>j</code>表示向下移动一行</li><li><code>k</code> 向上移动一行</li><li><code>f</code> 向下翻一页</li><li><code>b</code> 向上翻一页</li><li><code>d</code> 向下移动半页</li><li><code>u</code> 向上移动半页</li><li><code>g</code> 跳转到第一行</li><li><code>G</code> 跳转到最后一行</li><li><code>行数 g</code> 例如<code>3 g</code> 跳到第三行</li><li><code>/搜索词</code> 从上往下搜索该词语</li><li><code>?搜索词</code> 从下往上搜索该词语</li><li><code>h</code>帮助窗口</li></ul><h4 id="2-比较仓库里的两个版本"><a href="#2-比较仓库里的两个版本" class="headerlink" title="(2)比较仓库里的两个版本"></a>(2)比较仓库里的两个版本</h4><p><code>git diff 版本号1 版本号2</code></p><h4 id="3-比较当前工作目录和仓库里的版本快照"><a href="#3-比较当前工作目录和仓库里的版本快照" class="headerlink" title="(3)比较当前工作目录和仓库里的版本快照"></a>(3)比较当前工作目录和仓库里的版本快照</h4><p><code>git diff 版本号</code></p><p>另外：当前工作目录和最新的仓库版本，即HEAD所指的版本比较</p><p><code>git diff HEAD</code></p><h4 id="4-比较暂存区域与仓库"><a href="#4-比较暂存区域与仓库" class="headerlink" title="(4)比较暂存区域与仓库"></a>(4)比较暂存区域与仓库</h4><p>1.仓库最新的版本快照与暂存区文件比较</p><p><code>git diff --cached</code></p><p>2.指定仓库的一个版本快照与暂存区文件比较</p><p><code>git diff --cached 版本号</code></p><h3 id="（六）修改"><a href="#（六）修改" class="headerlink" title="（六）修改"></a>（六）修改</h3><h4 id="1-修改提交说明"><a href="#1-修改提交说明" class="headerlink" title="(1)修改提交说明"></a>(1)修改提交说明</h4><p>如果你想改变之前的提交说明，那么就</p><p><code>git commit --amend</code></p><p>或者直接</p><p><code>git commit --amend -m &quot;你改变后的提交说明&quot;</code></p><h4 id="2-删除文件"><a href="#2-删除文件" class="headerlink" title="(2)删除文件"></a>(2)删除文件</h4><ul><li><p><code>git rm 文件名</code>：删除暂存区与工作目录里的该文件，仓库里的不会删除，如果想删除仓库里的请回滚</p></li><li><p><code>git rm -f 文件名</code>：如果暂存区与工作目录里的文件出现同名不同内容的情况，用上面那种就会提示你有情况了，你可以用该命令强制一起删除</p></li><li><p><code>git rm --cached 文件名</code>：只删除暂存区的文件而不删除工作目录下的文件</p></li></ul><h4 id="3-文件重命名"><a href="#3-文件重命名" class="headerlink" title="(3)文件重命名"></a>(3)文件重命名</h4><p><code>git mv 原文件名 新文件名</code></p><h2 id="四、分支"><a href="#四、分支" class="headerlink" title="四、分支"></a>四、分支</h2><blockquote><p>关于什么是git分支，他有什么优点，为什么要创建分支，自行百度</p></blockquote><h3 id="（一）创建分支"><a href="#（一）创建分支" class="headerlink" title="（一）创建分支"></a>（一）创建分支</h3><p><code>git branch 分支名称</code></p><h3 id="（二）切换分支"><a href="#（二）切换分支" class="headerlink" title="（二）切换分支"></a>（二）切换分支</h3><blockquote><p>把HEAD指向的分支切换到你需要的分支上来</p></blockquote><p><code>git checkout 分支名</code></p><p>【偷懒】创建新分支并且切换到新分支里去，连续做两步</p><p><code>git checkout -b 分支名</code></p><h3 id="（三）合并分支"><a href="#（三）合并分支" class="headerlink" title="（三）合并分支"></a>（三）合并分支</h3><p>把别处的分支合并到你现在HEAD所指向的分支上来</p><p><code>git merge 分支名</code></p><h3 id="（四）删除分支"><a href="#（四）删除分支" class="headerlink" title="（四）删除分支"></a>（四）删除分支</h3><p><code>git branch -d 分支名</code></p><p>或者写两个小横线的全名</p><p><code>git branch --delete 分支名</code></p><h3 id="（五）匿名分支"><a href="#（五）匿名分支" class="headerlink" title="（五）匿名分支"></a>（五）匿名分支</h3><p><code>git checkout HEAD~</code></p><p>HEAD处于游离状态，你可以对这个创建的匿名分支作实验性操作，当HEAD回到正常分支时匿名分支会销毁</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【 CSS 】元素水平垂直居中</title>
    <link href="/2020/04/05/%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <url>/2020/04/05/%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="【-CSS-】元素水平垂直居中"><a href="#【-CSS-】元素水平垂直居中" class="headerlink" title="【 CSS 】元素水平垂直居中"></a>【 CSS 】元素水平垂直居中</h1><h2 id="一、水平居中"><a href="#一、水平居中" class="headerlink" title="一、水平居中"></a>一、水平居中</h2><h3 id="1、对于行内元素"><a href="#1、对于行内元素" class="headerlink" title="1、对于行内元素"></a>1、对于行内元素</h3><pre><code class="css">.content {    width: 100%;    text-align: center;}</code></pre><pre><code class="html">&lt;div class=&quot;content&quot;&gt;hello&lt;/div&gt;</code></pre><h3 id="2、对于确定宽度的块级元素"><a href="#2、对于确定宽度的块级元素" class="headerlink" title="2、对于确定宽度的块级元素"></a>2、对于确定宽度的块级元素</h3><blockquote><p>width, margin 实现</p></blockquote><pre><code class="css">.parent {    width: 400px;    background-color: silver;}.children {    width: 200px;  margin: 0 auto;    text-align: center;    border: 1px sienna solid;}</code></pre><pre><code class="html">&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;children&quot;&gt;      Hello World    &lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="/img/image-20200405214218652.png" srcset="/img/loading.gif" alt="image-20200405214218652"></p><h3 id="3、对于宽度未知的块级元素"><a href="#3、对于宽度未知的块级元素" class="headerlink" title="3、对于宽度未知的块级元素"></a>3、对于宽度未知的块级元素</h3><h4 id="方法1：设置table"><a href="#方法1：设置table" class="headerlink" title="方法1：设置table"></a><strong>方法1：设置table</strong></h4><pre><code class="css">.parent {    width: 400px;    background-color: silver;}.children {    display:table;    margin:0 auto;    border:1px solid red;}</code></pre><pre><code class="html">&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;children&quot;&gt;      Hello World    &lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="/img/image-20200405213237414.png" srcset="/img/loading.gif" alt="image-20200405213237414"></p><h4 id="方法2：设置inline-block"><a href="#方法2：设置inline-block" class="headerlink" title="方法2：设置inline-block"></a><strong>方法2：设置inline-block</strong></h4><pre><code class="css">.parent {    width: 400px;    background-color: silver;    text-align: center;}.children {    height: 200px;    display:inline-block;    border: 1px sienna solid;}</code></pre><pre><code class="html">&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;children&quot;&gt;        Hello World    &lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="/img/image-20200405214840461.png" srcset="/img/loading.gif" alt="image-20200405214840461"></p><h4 id="方法3：弹性盒子-display-flex"><a href="#方法3：弹性盒子-display-flex" class="headerlink" title="方法3：弹性盒子 display:flex"></a>方法3：弹性盒子 display:flex</h4><pre><code class="css">.parent {    width: 400px;    height: 400px;    background-color: silver;    display: flex;    justify-content: center;}.children {    height: 200px;    background-color: sienna;}</code></pre><pre><code class="html">&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;children&quot;&gt;        Hello World    &lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="/img/image-20200405221417435.png" srcset="/img/loading.gif" alt="image-20200405221417435"></p><h4 id="方法4：父盒子设置相对，子盒子绝对，left、transform-移位实现"><a href="#方法4：父盒子设置相对，子盒子绝对，left、transform-移位实现" class="headerlink" title="方法4：父盒子设置相对，子盒子绝对，left、transform 移位实现"></a>方法4：父盒子设置相对，子盒子绝对，left、transform 移位实现</h4><pre><code class="css">.parent {    position: relative;    width: 400px;    height: 400px;    background-color: silver;}.children {    position: absolute;    height: 200px;    left: 50%;    transform: translateX(-50%);    background-color: sienna;}</code></pre><pre><code class="html">&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;children&quot;&gt;        Hello World    &lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="/img/image-20200405221417435.png" srcset="/img/loading.gif" alt="image-20200405221417435"></p><h2 id="二、垂直居中"><a href="#二、垂直居中" class="headerlink" title="二、垂直居中"></a>二、垂直居中</h2><h3 id="1、父盒子设置相对，子盒子绝对，top、transform-移位实现"><a href="#1、父盒子设置相对，子盒子绝对，top、transform-移位实现" class="headerlink" title="1、父盒子设置相对，子盒子绝对，top、transform 移位实现"></a>1、父盒子设置相对，子盒子绝对，top、transform 移位实现</h3><pre><code class="css">.parent {    position: relative;    width: 400px;    height: 400px;    background-color: silver;}.children {    position: absolute;    height: 200px;    top: 50%;    transform: translateY(-50%);    background-color: sienna;}</code></pre><pre><code class="html">&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;children&quot;&gt;        Hello World    &lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="/img/image-20200405221804086.png" srcset="/img/loading.gif" alt="image-20200405220811446"></p><h3 id="2、弹性盒子-display-flex-实现"><a href="#2、弹性盒子-display-flex-实现" class="headerlink" title="2、弹性盒子 display:flex 实现"></a>2、弹性盒子 display:flex 实现</h3><pre><code class="css">.parent {    width: 400px;    height: 400px;    background-color: silver;    display: flex;    align-items: center;}.children {    height: 200px;    background-color: sienna;}</code></pre><pre><code class="html">&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;children&quot;&gt;        Hello World    &lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="/img/image-20200405221804086.png" srcset="/img/loading.gif" alt="image-20200405221804086"></p><h2 id="三、水平且垂直居中"><a href="#三、水平且垂直居中" class="headerlink" title="三、水平且垂直居中"></a>三、水平且垂直居中</h2><blockquote><p>结合上述两种方法即刻</p></blockquote><h3 id="例如：弹性盒子"><a href="#例如：弹性盒子" class="headerlink" title="例如：弹性盒子"></a>例如：弹性盒子</h3><pre><code class="css">.parent {    width: 400px;    height: 400px;    background-color: silver;    display: flex;    align-items: center;    justify-content: center;}.children {    width: 200px;    height: 200px;    background-color: sienna;}</code></pre><pre><code class="html">&lt;div class=&quot;parent&quot;&gt;    &lt;div class=&quot;children&quot;&gt;        Hello World    &lt;/div&gt;&lt;/div&gt;</code></pre><p><img src="/img/image-20200405222613740.png" srcset="/img/loading.gif" alt="image-20200405222613740"></p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
      <tag>水平垂直居中</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
